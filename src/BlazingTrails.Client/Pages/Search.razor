@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"
@inject NavigationManager Navigation
@inject HttpClient http

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrum">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

@if (SearchResults is null)
{
    <p>Loading search results...</p>
}
else
{
    <div class="clearfix">
        <h3 class="float-md-start">Search results for: @SearchTerm</h3>
        <SearchFilter SearchTerm="@SearchTerm" />
    </div>
    <div id="trails" class="row">
        @foreach (var trail in SearchResults)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
            </div>
            <TrailDetails Trail="trail" />
        }
    </div>
}

@code {
    public IEnumerable<Trail>? SearchResults { get; set; }

    private IEnumerable<Trail>? _cachedSearchResults { get; set; }

    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    [Parameter]
    public int? MaxLength { get; set; }

    public Trail? SelectedTrail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var trails = await http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");

        SearchResults = trails!.Where(t =>
            t.Name.Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase) ||
            t.Location.Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase));

        _cachedSearchResults = SearchResults;
    }

    private void HandleTrailSelected(Trail trail)
    {
        SelectedTrail = trail;
        Console.WriteLine($"Selected Trail: {trail.Name}");
    }

    protected override void OnParametersSet()
    {
        if (_cachedSearchResults!.Any() && MaxLength.HasValue && MaxLength > 0)
        {
            SearchResults = _cachedSearchResults!.Where(t => t.Length <= MaxLength);
        }
        else if (_cachedSearchResults!.Any() && MaxLength is null)
        {
            SearchResults = _cachedSearchResults;
        }

        StateHasChanged();
    }
}
